<?php
/*
 * Implementation of hook_node_info()
 */

function example_nodes_node_info() {
    return array(
      'product' => array(
          'name' => t('Product'),
          'module' => 'example_nodes',
          'description' => t('A <em>Example Module</em> is the initial node that i probe'),
          'title_label' => t('Product name'),
          'body_label' => t('Description')
      )
    );
}

/*
 * Implementation of hook_form()
 */

function example_nodes_form(&$node, $form_state) {
    $type = node_get_types('type', $node);
    if($type->has_title){
        $form['title'] = array(
          '#type' => 'textfield',
          '#title' => check_plain($type->title_label),
          '#required' => TRUE,
          '#default_value' => $node->title,
          '#weight' => -5
        );
    }

    if($type->has_body){
        $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
        $form['body_field']['body']['#description'] = t('Enter the product description');
        $form['body_field']['#weight'] = -4;
    }
    
    $form['information'] = array(
      '#type' => 'fieldset',
      '#title' => t('Product Information'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -3
    );
    
    $form['information']['price'] = array(
        '#type' => 'textfield',
        '#title' => t('Price'),
        '#required' => TRUE,
        '#default_value' => isset($node->price) ? $node->price : 0,
        '#description' => t("Product's price (Soles)."),
        '#weight' => 1,
        '#size' => 20,
        '#maxlength' => 35,
        '#field_suffix' => 'S/.'
    );
    
    $form['information']['weight'] = array(
        '#type' => 'textfield',
        '#title' => t('Weight'),
        '#default_value' => isset($node->weight) ? $node->weight : 0,
        '#description' => t("Product's as weight (Kg)."),
        '#weight' => 2,
        '#size' => 10,
        '#maxlength' => 15
     );
    
    $form['information']['dimensions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Dimensions'),
        '#description' => t("Physical dimensions of the packaged product (cm)."),
        '#weight' => 3
    );
    
    $form['information']['dimensions']['length'] = array(
        '#type' => 'textfield',
        '#title' => t('Length'),
        '#default_value' => isset($node->length) ? $node->length : '',
        '#weight' => 1,
        '#size' => 10
    );
    
    $form['information']['dimensions']['width'] = array(
        '#type' => 'textfield',
        '#title' => t('Width'),
        '#default_value' => isset($node->width) ? $node->width : '',
        '#weight' => 2,
        '#size' => 10
    );
    
    $form['information']['dimensions']['height'] = array(
        '#type' => 'textfield',
        '#title' => t('Height'),
        '#default_value' => isset($node->height) ? $node->height : '',
        '#weight' => 3,
        '#size' => 10
    );
    
    return $form;
}

/*
 * Implementation of hook_validate().
 */

function example_nodes_validate($node, &$form) {
    $pattern = '/^\d*(\.\d*)?$/';
    if(!empty($node->price) && !is_numeric($node->price) && !preg_match($pattern, $node->price)){
        form_set_error('price', t('Price must be in a valid number format. No commas and only one decimal point'));
    }
    
    if(!empty($node->weight) && (!is_numeric($node->weight)) || $node->weight < 0){
        form_set_error('weight', t('Weight must be a positive number.'));
    }
    
    if(!empty($node->length) && (!is_numeric($node->length)) || $node->length < 0){
        form_set_error('length', t('Length must be a positive number.'));
    }
    
    if(!empty($node->width) && (!is_numeric($node->width)) || $node->width < 0){
        form_set_error('width', t('Width must be a positive number.'));
    }
    
    if(!empty($node->height) && (!is_numeric($node->height)) || $node->height < 0){
        form_set_error('height', t('Height must be a positive number.'));
    }
}

/*
 * Implementation of hook_insert().
 */
function example_nodes_insert($node) {
    $query = "INSERT INTO {nodexample} (vid, sid, price, weight, length, width, height) VALUES (%d, %d, %d, %d, %d, %d, %d);";
    db_query($query, $node->vid ,$node->sid, $node->price, $node->weight, $node->length, $node->width, $node->height);
}

/*
 * Implementation of hook_update().
 */
function example_nodes_update($node) {
    if($node->revision){
        example_nodes_insert($node);
    }else{
        $query = "UPDATE {nodexample} SET price = %d, weight = %d, length = %d, width = %d, height = %d WHERE sid = %d";
        db_query($query,$node->sid, $node->price, $node->weight, $node->length, $node->width, $node->height);
    }
}

/*
 * Implementation of hook_delete().
 */
function example_nodes_delete($node) {
    $query = "DELETE FROM {nodexample} WHERE sid = %d";
    db_query($query, $node->sid);
}

/*
 * Implementation of hook_load().
 */
function example_nodes_load($node) {
    $query = "SELECT price, weight, length, width, height FROM {nodexample} WHERE sid = %d";
    $additions = db_fetch_object(db_query($query, $node->sid));
    return $additions;
}

function example_nodes_view($node, $teaser=FALSE, $page=FALSE) {
    $node = node_prepare($node, $teaser);
    $node->content['display_price'] = array(
        '#value' => theme('example_nodess_price', $node->sell),
        '#weight' => 0
    );
    
    if(!$teaser){
        $node->content['body']['#value'] = theme('example_nodes_body', $node->body, $teaser, $page);
        $node->content['body']['#weight'] = 1;
    }else{
        $node->content['body']['#value'] = theme('example_nodes_body', $node->body, $teaser, $page);
    }
    
    return $node;
}

/*
 * Implementation of hook_theme().
 */
function example_nodes_theme() {
    return array(
      'example_nodes_body' => array(
          'arguments' => array('body' => '', 'teaser' => 0, 'page' => 0),
      ),
      
      'example_nodes_price' => array(
        'arguments' => array('price' => 0),  
      ),
    );
}

function theme_example_nodes_body($body, $teaser = 0, $page = 0) {
    $output = '<div class="product-body">';
    $output .= $body;
    $output .= '</div>';
    return $output;
}

function theme_example_nodes_price($price) {
    $output = '<div class="product-price">';
    $output .= t('Price: '). $price . ' Soles';
    $output .= '</div>';
    return $output;
}

/*
 * Implementation of hook_perm().
 */

function example_nodes_perm() {
    return array(
      'create products',
      'delete own products',
      'delete any product',
      'edit own products',
      'edit any product'
    );
}

/*
 * Implementation of hook_access().
 */

function example_nodes_access($op, $node, $account) {
    switch ($op) {
        case 'create':
            if($node->type == 'product')
                return user_access('create products', $account) ? TRUE : NULL;
            break;

        case 'update':
            if($node->type == 'product')
                return user_access('edit own products', $account) || (user_access('edit own product', $account)
                    && ($account->uid == $node->uid)) ? TRUE : NULL;
            break;
        
        case 'delete':
            if($node->type == 'product')
                return user_access('delete own products', $account) || (user_access('delete any product', $account)
                    && ($account->uid == $node->uid)) ? TRUE : NULL;
            break;
    }
}

/*
 * Implementation of hook_node_grants().
 */
function example_nodes_node_grants($account,$op) {
    if($op == 'view' && user_access('access private content', $account)){
        $grants['example_nodes'] = array(1);
    }  elseif (($op == 'update' || $op == 'delete') && user_access('edit private content', $account)) {
        $grants['example_nodes'] = array(2);
    }
    
    return $grants;
}
